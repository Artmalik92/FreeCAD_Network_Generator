import os
import re
import pandas as pd
import numpy as np
from scipy.spatial import Delaunay
import FreeCAD, FreeCADGui
import Draft
import shutil
import Part
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QFormLayout, QLineEdit, QComboBox, QSpinBox, QCheckBox, QPushButton, QFileDialog, QTextEdit
from PyQt5.QtGui import QFont
# test 2

class MyWindow(QDialog):
    def __init__(self):
        super().__init__()

        date_regex = re.compile(r'^\d{4}-\d{2}-\d{2}$')
        self.start_date = None
        self.interval = None
        self.num_periods = None
        self.periods_in_year = None
        self.points_amount = None
        self.gen_method = None
        self.date_list = None
        self.gen_radius = None
        self.min_distance = None
        self.max_distance = None

        self.temp_file_xyz_name = ''
        self.script_dir = os.path.dirname(os.path.abspath(__file__))
        self.data_dir = os.path.join(self.script_dir, "Data")

        if not os.path.exists(self.data_dir):
            os.makedirs(self.data_dir)

        self.createUI()

    def createUI(self):
        layout = QVBoxLayout()

        form_layout = QFormLayout()

        self.num_periods_input = QLineEdit()
        self.start_date_input = QLineEdit()
        self.interval_input = QComboBox()
        self.interval_input.addItems(['W', 'D'])
        self.points_spinbox = QSpinBox()
        self.points_spinbox.setRange(3, 100)
        self.points_spinbox.setSingleStep(1)
        self.points_spinbox.setValue(10)
        self.method_input = QComboBox()
        self.method_input.addItems(['centralized', 'consistent'])
        self.gen_radius_input = QLineEdit()
        self.min_distance_input = QLineEdit()
        self.max_distance_input = QLineEdit()

        form_layout.addRow('Num of periods:', self.num_periods_input)
        form_layout.addRow('Start date:', self.start_date_input)
        form_layout.addRow('Interval(week/day):', self.interval_input)
        form_layout.addRow('Num of points:', self.points_spinbox)
        form_layout.addRow('Generation method:', self.method_input)
        form_layout.addRow('Gen radius (deg):', self.gen_radius_input)
        form_layout.addRow('Min distance (m):', self.min_distance_input)
        form_layout.addRow('Max distance (m):', self.max_distance_input)

        layout.addLayout(form_layout)

        self.harmonics_checkbox = QCheckBox('Harmonics')
        self.linear_trend_checkbox = QCheckBox('Linear trend')
        self.noise_checkbox = QCheckBox('Noise')
        self.impulse_checkbox = QCheckBox('Impulse(random)')

        layout.addWidget(self.harmonics_checkbox)
        layout.addWidget(self.linear_trend_checkbox)
        layout.addWidget(self.noise_checkbox)
        layout.addWidget(self.impulse_checkbox)

        self.create_button = QPushButton('Create')
        self.create_button.clicked.connect(self.btn1_press)
        layout.addWidget(self.create_button)

        self.show_network_button = QPushButton('Show network map')
        self.show_network_button.clicked.connect(self.btn2_press)
        layout.addWidget(self.show_network_button)

        self.save_button = QPushButton('Save to file')
        self.save_button.clicked.connect(self.btn3_press)
        layout.addWidget(self.save_button)

        self.load_csv_button = QPushButton('Load CSV')
        self.load_csv_button.clicked.connect(self.load_csv_file)
        layout.addWidget(self.load_csv_button)

        self.command_line = QTextEdit(self)
        self.command_line.setStyleSheet("background-color: black; color: white;")
        self.command_line.setFont(QFont("Courier", 10))
        layout.addWidget(self.command_line)

        self.setLayout(layout)
        self.setWindowTitle('Synthetic TimeSeries data app')
        self.showMaximized()

    def load_csv_file(self):
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getOpenFileName(self, "Load CSV Data File", "", "CSV Files (*.csv)", options=options)
        if file_name:
            self.temp_file_xyz_name = file_name
            self.command_line.append(f"CSV Data File loaded: {self.temp_file_xyz_name}")

    def btn1_press(self):
        self.command_line.append('Creating model...')
        date_regex = re.compile(r'^\d{4}-\d{2}-\d{2}$')

        if self.num_periods_input.text().isdigit():
            self.num_periods = int(self.num_periods_input.text())
            if self.num_periods < 1:
                self.command_line.append('Incorrect number of periods')
                return
        else:
            self.command_line.append('Incorrect number of periods')
            return

        self.start_date = self.start_date_input.text()
        if not date_regex.match(self.start_date):
            self.command_line.append('Incorrect date format')
            return

        self.interval = self.interval_input.currentText()
        if self.interval == 'W':
            self.periods_in_year = 52
        if self.interval == 'D':
            self.periods_in_year = 365

        self.date_list = pd.date_range(start=self.start_date, periods=self.num_periods, freq=self.interval)
        self.points_amount = self.points_spinbox.value()
        self.gen_method = self.method_input.currentText()
        self.gen_radius = float(self.gen_radius_input.text())
        self.min_distance = int(self.min_distance_input.text())
        self.max_distance = int(self.max_distance_input.text())

        points = self.create_random_points()
        self.generate_time_series(points)

        self.command_line.append("Model created")

    def create_random_points(self):
        ref_lat = 55.0084
        ref_lon = 82.9357

        points = []
        for i in range(self.points_amount):
            lat = np.random.uniform(ref_lat - self.gen_radius, ref_lat + self.gen_radius)
            lon = np.random.uniform(ref_lon - self.gen_radius, ref_lon + self.gen_radius)
            points.append((lat, lon))
        return points

    def generate_time_series(self, points):
        data = []
        station_names = ['Station A', 'Station B', 'Station C', 'Station D', 'Station E']

        for i, point in enumerate(points):
            lat, lon = point
            station_name = station_names[i % len(station_names)]

            for date in self.date_list:
                height = np.random.uniform(0, 100)

                if self.harmonics_checkbox.isChecked():
                    height += 10 * np.sin(2 * np.pi + date.dayofyear / 365)

                if self.linear_trend_checkbox.isChecked():
                    height += 0.2 * date.dayofyear

                if self.noise_checkbox.isChecked():
                    height += np.random.normal(0, 5)

                if self.impulse_checkbox.isChecked():
                    if np.random.rand() < 0.05:
                        height += np.random.uniform(10, 20)

                data.append({
                    'Date': date,
                    'Station': station_name,
                    'Latitude': lat,
                    'Longitude': lon,
                    'Height': height
                    
                })

        df = pd.DataFrame(data)
        self.temp_file_xyz_name = os.path.join(self.data_dir, 'temp_xyz.csv')
        df.to_csv(self.temp_file_xyz_name, sep=';', index=False)

        self.command_line.append(f"Time series generated and saved to file: {self.temp_file_xyz_name}")

    def btn2_press(self):
        try:
            if not self.temp_file_xyz_name:
                self.command_line.append("No CSV file loaded. Please load a CSV file first.")
                return

            doc = FreeCAD.newDocument("NetworkMap")
            data = pd.read_csv(self.temp_file_xyz_name, delimiter=';')

            points = np.array(data[['Longitude', 'Latitude']])
            labels = data['Station'].astype(str).values

            tri = Delaunay(points)

            for simplex in tri.simplices:
                point1 = points[simplex[0]]
                point2 = points[simplex[1]]
                point3 = points[simplex[2]]
                polygon = Part.makePolygon([FreeCAD.Vector(point1[0], point1[1], 0),
                                            FreeCAD.Vector(point2[0], point2[1], 0),
                                            FreeCAD.Vector(point3[0], point3[1], 0),
                                            FreeCAD.Vector(point1[0], point1[1], 0)])
                Part.show(polygon)

            for i, point in enumerate(points):
                label = labels[i]
                offset = FreeCAD.Vector(0.01, 0.01, 0)
                text_position = FreeCAD.Vector(point[0], point[1], 0) + offset
                text = Draft.make_text([label], text_position)
                if text is not None:
                    text.ViewObject.FontSize = 0.00001

            FreeCADGui.activeDocument().activeView().viewAxometric()
            FreeCADGui.SendMsgToActiveView("ViewFit")
        except Exception as e:
            self.command_line.append(f'Error generating network map: {e}')

    def btn3_press(self):
        try:
            save_path, _ = QFileDialog.getSaveFileName(self, "Save File", "", "CSV Files (*.csv)")
            if save_path:
                shutil.copyfile(self.temp_file_xyz_name, save_path)
                self.command_line.append("File saved.")
        except Exception as e:
            self.command_line.append(f'Error saving file: {e}')


if __name__ == '__main__':
    main_window = MyWindow()
    main_window.exec_()
