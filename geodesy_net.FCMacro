import FreeCAD as App
import Draft
import pandas as pd
from pathlib import Path

# Коэффициент масштабирования
scale_factor = 1  # Измените этот коэффициент для увеличения или уменьшения масштаба

# Импорт CSV
doc = App.activeDocument()
if doc is None:
    doc = App.newDocument("GeodesicNetwork")

csv_path = Path("C:/Users/julia/OneDrive/Рабочий стол/data_XYZ.csv")
df = pd.read_csv(csv_path.resolve(), sep=';')

# Извлечение координат и имен
x_coords = df['x'] * scale_factor
y_coords = df['y'] * scale_factor
z_coords = df['z'] * scale_factor
names = df['Names']
types = df.get('Type', pd.Series([None]*len(df)))  # Получение столбца 'Type', если его нет, заполняем None

# Создание точек и словаря с координатами точек по имени
points_dict = {}
for i in range(len(x_coords)):
    point = App.Vector(x_coords[i], y_coords[i], z_coords[i])
    points_dict[names[i]] = point

    # Создание условных знаков в зависимости от типа точки
    if types[i] == "karkas":
        # Квадрат с точкой внутри
        pl = App.Placement()
        pl.Base = point
        rectangle = Draft.makeRectangle(500 * scale_factor, 500 * scale_factor, placement=pl, face=False)
        Draft.makePoint(point)
        Draft.autogroup(rectangle)
    elif types[i] == "core":
        # Треугольник с точкой внутри
        pl = App.Placement()
        pl.Base = point
        line1 = Draft.makeWire([point, App.Vector(point.x + 250 * scale_factor, point.y, point.z)])
        line2 = Draft.makeWire([App.Vector(point.x, point.y, point.z), App.Vector(point.x, point.y + 250 * scale_factor, point.z)])
        line3 = Draft.makeWire([App.Vector(point.x, point.y + 250 * scale_factor, point.z), App.Vector(point.x + 250 * scale_factor, point.y, point.z)])
        triangle = Draft.makeWire(line1.Edges + line2.Edges + line3.Edges, closed=True)
        Draft.makePoint(point)
    elif types[i] == "sggs":
        # Окружность с точкой внутри
        pl = App.Placement()
        pl.Base = point
        circle = Draft.makeCircle(radius=500 * scale_factor, placement=pl, face=False)
        Draft.makePoint(point)
        Draft.autogroup(circle)
    else:
        # Обычная точка
        Draft.makePoint(point)

# Соединение точек линиями на основе их порядка в CSV
for i in range(len(x_coords) - 1):
    point1 = points_dict[names[i]]
    point2 = points_dict[names[i + 1]]
    Draft.makeLine(point1, point2)

# Добавление подписей к точкам
for i in range(len(x_coords)):
    if names[i] != "Names":  # Пропуск первой строки с заголовками
        t = [str(names[i])]  # Список с текстом для подписи
        p = App.Vector(x_coords[i], y_coords[i], z_coords[i])  # Координаты для подписи
        place = App.Placement(p, App.Rotation())
        text = Draft.makeText(t, place)
        text.ViewObject.FontSize = 0.5 * scale_factor  # Установка размера шрифта с учетом масштаба
        Draft.move(text, App.Vector(0.03 * scale_factor, 0, 0.0), copy=False)

# Перестроение документа
doc.recompute()

# Перемещение камеры для отображения всей геодезической сети
if App.GuiUp:
    import FreeCADGui as Gui
    Gui.ActiveDocument.ActiveView.viewIsometric()
    Gui.SendMsgToActiveView("ViewFit")
